<?php

namespace S7tH\DirectoryBundle\Repository;

use Doctrine\ORM\EntityRepository;

use Doctrine\ORM\Tools\Pagination\Paginator;
use InvalidArgumentException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Doctrine\ORM\QueryBuilder;

/**
 * CommentaryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommentaryRepository extends \Doctrine\ORM\EntityRepository
{
  /**
   * Recover a paged and resorted list of commentaries
   *
   * @param int $page
   * @param int $nbMaxPerPage
   *
   * @throws InvalidArgumentException
   * @throws NotFoundHttpException
   *
   * @return Paginator
   */
  public function findByCom($trickid ,$page, $nbMaxPerPage)
  {
    /*if (!is_numeric($page))
    {
      throw new InvalidArgumentException(
      'La valeur de l\'argument $page est incorrecte (valeur : ' . $page . ').'
      );
    }*/

    if ($page < 1)
    {
      throw new NotFoundHttpException('La page demandÃ©e n\'existe pas');
    }

    /*if (!is_numeric($nbMaxPerPage)) 
    {
      throw new InvalidArgumentException(
      'La valeur de l\'argument $nbMaxParPage est incorrecte (valeur : ' . $nbMaxPerPage . ').'
      );
    }*/
    
    $qb = $this->createQueryBuilder('c')
      //we made a juncture with the tricks entity alias trk
      ->innerJoin('c.trick', 'trk')
      ->addSelect('trk')
      ->where('trk = :trickid')
        ->setParameter('trickid' , $trickid)
      ->orderBy('c.id', 'DESC');
        
    $query = $qb->getQuery();
   
    $firstResult = ($page - 1) * $nbMaxPerPage;
    $query->setFirstResult($firstResult)->setMaxResults($nbMaxPerPage);
    $paginator = new Paginator($query);

    if ( ($paginator->count() <= $firstResult) && $page != 1)
    {
      throw new NotFoundHttpException('La page demandÃ©e n\'existe pas.'); // 404 page, exept for the first page
    }
        return $paginator;
  }
}
